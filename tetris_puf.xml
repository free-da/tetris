<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>930</x><y>30</y><w>380</w><h>350</h></coordinates><panel_attributes>MainWindowController
--
private static final int PLAYING_GRID_SHAPE_ROW_POSITION = 0;
private static final int NEXT_GRID_SHAPE_ROW_POSITION = 6;
private TetrisGridController gameBoardGridController;
private TetrisGridController nextGridController;
private TetrisGridModel gameboardGridModel;
private MovementController movementController;
private Stage stage;
private Scene scene;
static double time;
static AnimationTimer timer;
private Canvas gameboardCanvas, nextUpCanvas;
private Label pointsLabel;
--
public void initialize()
public void gameIsOver()
public void shapeReachedGroundAndLocked()
public void setSceneAndSetupListeners(Scene scene, Stage stage)
private void newGame()
private void startAnimationTimer()
private void gameOver()
private void putNextShapeInStartPosition()
private void putNewShapeInNextGrid()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1490</x><y>410</y><w>490</w><h>290</h></coordinates><panel_attributes>MovementController
--
private TetrisGridModel gridModel;	
private TetrisShapeModel shapeModel;
private List&lt;GameOverListenerInterface&gt; gameOverListeners
private List&lt;LockShapeInterface&gt; lockShapeListeners
--
public MovementController(TetrisShapeModel shapeModel, TetrisGridModel gridModel)
public void addGameOverListener(GameOverListenerInterface toAdd)
public void addLockShapeListener(LockShapeInterface toAdd)
void setNewShapeModel(TetrisShapeModel shapeModel)
void moveLeft()
void moveRight()
void moveDown()
void rotateRight()
void rotateLeft()
private boolean positionIsLegal(int offsetX, int offsetY)
private boolean singlePointPositionIsIllegal(int x, int y)
private void setShapeToNewPosition(int offsetX, int offsetY)
private void lockInGridAndMakeNewShape()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>310</x><y>440</y><w>490</w><h>280</h></coordinates><panel_attributes>TetrisGridController
--
private static final int MELTED_ROW_SCORE = 1000;
private static final int LOCKED_SHAPE_SCORE = 50;
private TetrisGridModel tetrisGridModel;
private TetrisGridView tetrisGridView;
TetrisShapeModel newShape;
--
public TetrisGridController(Canvas gameboardCanvas, TetrisGridModel tetrisGridModel)
TetrisShapeModel newTetrisShape(int rowIndex)
TetrisShapeModel newTetrisShape(int rowIndex, KlotzTypeModel klotzType)
void meltRowsAndIncrementScoreIfNecessary()
void incrementScoreForLockedShape()
private void refreshGrid()
private void fillGridWithKlotzes()
private int checkFirstFullRows()
private void clearFullRow(int rowIndex)
private void incrementScoreCount(int increment)
public void tetrisShapeChanged()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>710</x><y>30</y><w>240</w><h>30</h></coordinates><panel_attributes>lt=-&gt;&gt;&gt;</panel_attributes><additional_attributes>10;10;220;10</additional_attributes></element><element><id>Relation</id><coordinates><x>540</x><y>710</y><w>30</w><h>110</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;90</additional_attributes></element><element><id>Relation</id><coordinates><x>1080</x><y>370</y><w>430</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;410;50</additional_attributes></element><element><id>UMLInterface</id><coordinates><x>0</x><y>590</y><w>220</w><h>100</h></coordinates><panel_attributes>TetrisShapeChangedListenerInterface
--
void tetrisShapeChanged();
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLInterface</id><coordinates><x>1450</x><y>260</y><w>240</w><h>100</h></coordinates><panel_attributes>LockShapeInterface
--
void shapeReachedGroundAndLocked()
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>210</x><y>640</y><w>120</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>100;60;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1300</x><y>190</y><w>210</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;70;190;10</additional_attributes></element><element><id>UMLInterface</id><coordinates><x>1490</x><y>140</y><w>160</w><h>100</h></coordinates><panel_attributes>GameOverListenerInterface
--
void gameIsOver();
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1300</x><y>260</y><w>170</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;150;60</additional_attributes></element><element><id>Relation</id><coordinates><x>790</x><y>462</y><w>190</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>170;60;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1330</x><y>412</y><w>180</w><h>110</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;90;160;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>960</x><y>452</y><w>380</w><h>100</h></coordinates><panel_attributes>InputEventController
--
Scene scene;
MovementController move;
TetrisGridController grid;
--
public InputEventController(Scene scene, MovementController move)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>840</x><y>1090</y><w>640</w><h>260</h></coordinates><panel_attributes>TetrisShapeModel
--
private Point anchorPoint;
private KlotzTypeModel klotzType;
private SingleKlotzModel[] threeKlotzVectorsRelativeToAnchorPoint;
private List&lt;TetrisShapeChangedListenerInterface&gt; shapeChangedListeners
--
public void addListener(TetrisShapeChangedListenerInterface toAdd)
public void tellObserversIChanged()
public TetrisShapeModel(KlotzTypeModel klotzType, int rowIndex, int columnIndex, TetrisGridModel tetrisGridModel)
public Point getSingleKlotzCoordinate(SingleKlotzModel klotz)
public Point[] getFourKlotzCoordinates()
public KlotzTypeModel getKlotzType()
public Point getAnchorPoint()
public void setAnchorPoint(int x, int y)
public SingleKlotzModel[] getThreeKlotzVectorsRelativeToAnchorPoint()
public void setThreeKlotzVectorsRelativeToAnchorPoint(SingleKlotzModel[] threeKlotzVectorsRelativeToAnchorPoint)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1440</x><y>452</y><w>70</w><h>660</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>50;10;10;640</additional_attributes></element><element><id>Relation</id><coordinates><x>790</x><y>522</y><w>220</w><h>590</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;200;570</additional_attributes></element><element><id>UMLClass</id><coordinates><x>980</x><y>810</y><w>450</w><h>220</h></coordinates><panel_attributes>TetrisGridModel
--
private int numberOfRows, numberOfColumns;
private KlotzTypeModel[][] gridOfKlotzes; 
private final StringProperty scoreCount;
--
public final String getScoreCount()
public final void setScoreCount(String value)
public final StringProperty scoreCountProperty()
public TetrisGridModel(int rows, int columns)
public void initialiseKlotzTypeModelArray()
public int getNumberOfRows()
public int getNumberOfColumns()
public KlotzTypeModel getKlotzOfCell(int rowIndex, int columnIndex)
public void setKlotzOfCell(int rowIndex, int columnIndex, KlotzTypeModel klotzType)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>790</x><y>492</y><w>250</w><h>340</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;230;320</additional_attributes></element><element><id>Relation</id><coordinates><x>1370</x><y>432</y><w>140</w><h>400</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>120;10;10;380</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1650</x><y>850</y><w>360</w><h>130</h></coordinates><panel_attributes>KlotzTypeModel
--
LKlotz, IKlotz, ZKlotz, OKlotz, TKlotz, JKlotz, SKlotz, NoKlotz;
private static final KlotzTypeModel[] VALUES = 
         {LKlotz, IKlotz, ZKlotz, OKlotz, TKlotz, JKlotz, SKlotz};
private static final int SIZE = VALUES.length;
private static final Random RANDOM = new Random();
--
public static KlotzTypeModel randomKlotzType()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1420</x><y>850</y><w>250</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;230;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1470</x><y>860</y><w>200</w><h>300</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
</panel_attributes><additional_attributes>10;280;180;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1650</x><y>1030</y><w>360</w><h>130</h></coordinates><panel_attributes>SingleKlotzModel
--
private VectorDirectionsModel direction;
int norm;
--
public SingleKlotzModel(VectorDirectionsModel direction, int norm)
public VectorDirectionsModel getDirection()
public void setDirection(VectorDirectionsModel direction)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1470</x><y>1030</y><w>200</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
</panel_attributes><additional_attributes>10;120;180;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1650</x><y>1200</y><w>360</w><h>130</h></coordinates><panel_attributes>VectorDirectionsModel
--
NORTH, NORTHWEST, WEST, SOUTHWEST, SOUTH, SOUTHEAST, EAST, NORTHEAST;	
private static final VectorDirectionsModel[] VALUES = {NORTH, NORTHWEST, WEST, SOUTHWEST, SOUTH, SOUTHEAST, EAST, NORTHEAST};
--
public static VectorDirectionsModel rotateRight(VectorDirectionsModel direction)
public static VectorDirectionsModel rotateLeft(VectorDirectionsModel direction)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1790</x><y>1150</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;-
</panel_attributes><additional_attributes>10;10;10;50</additional_attributes></element><element><id>UMLClass</id><coordinates><x>280</x><y>800</y><w>490</w><h>170</h></coordinates><panel_attributes>TetrisGridView
--
private static double CELL_SIZE = 12;
private static double BORDER_WIDTH = 2;
private Canvas canvas;
private int numberOfYGridLines, numberOfXGridLines;
--
public TetrisGridView(int rows, int columns, Canvas tetrisGridCanvas)
public void setKlotz(int rowIndex, int columnIndex, KlotzTypeModel klotzType)
private void drawKlotz(int rowIndex, int columnIndex, Color color)
private void drawNoKlotz(int rowIndex, int columnIndex)
private void drawGridLines(GraphicsContext gc)</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>770</x><y>370</y><w>260</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>240;10;10;70</additional_attributes></element><element><id>UMLClass</id><coordinates><x>460</x><y>10</y><w>260</w><h>70</h></coordinates><panel_attributes>Main
--
public void start(Stage stage) throws Exception
public static void main(String[] args) {
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>910</x><y>370</y><w>240</w><h>460</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>130;10;10;70;10;210;220;440</additional_attributes></element></diagram>